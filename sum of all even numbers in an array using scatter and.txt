#include <mpi.h>
#include <stdio.h>

int is_even(int x) {
    return x % 2 == 0;
}

int main(int argc, char **argv) {
    MPI_Init(&argc, &argv);

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);  // Get process ID
    MPI_Comm_size(MPI_COMM_WORLD, &size);  // Get total number of processes

    const int N = 16;                      // Total array size (divisible by size)
    int data[N], local[N / size], local_even_sum = 0;

    if (rank == 0) {
        // Initialize array at root
        printf("Original array:\n");
        for (int i = 0; i < N; i++) {
            data[i] = i + 1;
            printf("%d ", data[i]);
        }
        printf("\n");
    }

    // Scatter data from root to all processes
    MPI_Scatter(data, N / size, MPI_INT, local, N / size, MPI_INT, 0, MPI_COMM_WORLD);

    // Each process calculates sum of even numbers in its chunk
    for (int i = 0; i < N / size; i++) {
        if (is_even(local[i])) {
            local_even_sum += local[i];
        }
    }

    // Gather local sums at root process
    int gathered_sums[size];
    MPI_Gather(&local_even_sum, 1, MPI_INT, gathered_sums, 1, MPI_INT, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        int total_even_sum = 0;
        for (int i = 0; i < size; i++) {
            total_even_sum += gathered_sums[i];
        }
        printf("Sum of even numbers: %d\n", total_even_sum);
    }

    MPI_Finalize();
    return 0;
}

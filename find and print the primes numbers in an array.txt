#include <mpi.h> 
#include <stdio.h> 
 
int is_prime(int n) { 
    if (n <= 1) return 0; 
    for (int i = 2; i * i <= n; ++i) 
        if (n % i == 0) return 0; 
    return 1; 
} 
 
int main(int argc, char *argv[]) { 
    int rank, size; 
    const int N = 16; 
    int data[N] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}; 
 
    MPI_Init(&argc, &argv); 
    MPI_Comm_rank(MPI_COMM_WORLD, &rank); 
    MPI_Comm_size(MPI_COMM_WORLD, &size); 
 
    int chunk = N / size; 
    int local[chunk]; 
 
    MPI_Scatter(data, chunk, MPI_INT, local, chunk, MPI_INT, 0, MPI_COMM_WORLD); 
 
    int local_primes[chunk]; 
    int local_count = 0; 
 
    for (int i = 0; i < chunk; i++) { 
        if (is_prime(local[i])) { 
            local_primes[local_count++] = local[i]; 
        } 
    } 
 
    int recv_counts[size];    // Number of primes from each process 
    MPI_Gather(&local_count, 1, MPI_INT, recv_counts, 1, MPI_INT, 0, MPI_COMM_WORLD); 
 
    int displs[size], total = 0; 
    if (rank == 0) { 
        displs[0] = 0; 
        for (int i = 1; i < size; i++) { 
            displs[i] = displs[i - 1] + recv_counts[i - 1]; 
        } 
        total = displs[size - 1] + recv_counts[size - 1]; 
    } 
 
    int all_primes[N]; // assuming total primes â‰¤ N 
 
    MPI_Gatherv(local_primes, local_count, MPI_INT, 
                all_primes, recv_counts, displs, MPI_INT, 
                0, MPI_COMM_WORLD); 
 
    if (rank == 0) { 
        printf("Prime numbers in the array:\n"); 
        for (int i = 0; i < total; i++) { 
            printf("%d ", all_primes[i]); 
        } 
        printf("\n"); 
    } 
 
    MPI_Finalize(); 
    return 0; 
}
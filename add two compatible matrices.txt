#include <stdio.h> 
#include <mpi.h> 
 
#define N 4  // Rows 
#define M 4  // Columns 
 
int main(int argc, char *argv[]) { 
    int rank, size; 
    MPI_Init(&argc, &argv);                       // Initialize MPI 
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);         // Get current process rank 
    MPI_Comm_size(MPI_COMM_WORLD, &size);         // Get number of processes 
 
    if (N % size != 0) { 
        if (rank == 0) 
            printf("Matrix row count (%d) must be divisible by number of processes (%d)\n", N, size); 
        MPI_Finalize(); 
        return 1; 
    } 
 
    int rows_per_proc = N / size; 
 
    int A[N][M], B[N][M], C[N][M];           // Full matrices (used only by rank 0) 
    int local_A[rows_per_proc][M];           // Local submatrices 
    int local_B[rows_per_proc][M]; 
    int local_C[rows_per_proc][M]; 
 
    // Initialize matrices A and B at root 
    if (rank == 0) { 
        printf("Matrix A:\n"); 
        for (int i = 0; i < N; i++) { 
            for (int j = 0; j < M; j++) { 
                A[i][j] = i + j; 
                B[i][j] = (i + 1) * (j + 1); 
                printf("%3d ", A[i][j]); 
            } 
            printf("\n"); 
        } 
 
        printf("\nMatrix B:\n"); 
        for (int i = 0; i < N; i++) { 
            for (int j = 0; j < M; j++) { 
                printf("%3d ", B[i][j]); 
            } 
            printf("\n"); 
        } 
    } 
 
    // Scatter rows of A and B to all processes 
    MPI_Scatter(A, rows_per_proc * M, MPI_INT, 
                local_A, rows_per_proc * M, MPI_INT, 
                0, MPI_COMM_WORLD); 
 
    MPI_Scatter(B, rows_per_proc * M, MPI_INT, 
                local_B, rows_per_proc * M, MPI_INT, 
                0, MPI_COMM_WORLD); 
 
    // Local computation: local_C = local_A + local_B 
    for (int i = 0; i < rows_per_proc; i++) { 
        for (int j = 0; j < M; j++) { 
            local_C[i][j] = local_A[i][j] + local_B[i][j]; 
        } 
    } 
 
    // Gather local_C results back to C in root 
    MPI_Gather(local_C, rows_per_proc * M, MPI_INT, 
               C, rows_per_proc * M, MPI_INT, 
               0, MPI_COMM_WORLD); 
 
    // Display result matrix at root 
    if (rank == 0) { 
        printf("\nMatrix C = A + B:\n"); 
        for (int i = 0; i < N; i++) { 
            for (int j = 0; j < M; j++) { 
                printf("%3d ", C[i][j]); 
            } 
            printf("\n"); 
        } 
    } 
 
    MPI_Finalize();  // Finalize MPI 
    return 0; 
} 

#include <mpi.h> 
#include <stdio.h> 
#include <stdlib.h> 
 
#define M 4  // Rows of A and C 
#define N 4  // Columns of A and Rows of B 
#define P 4  // Columns of B and C 
 
int main(int argc, char *argv[]) { 
    int rank, size; 
    int A[M][N], B[N][P], C[M][P]; 
    int local_A[M/4][N], local_C[M/4][P]; 
 
    MPI_Init(&argc, &argv); 
    MPI_Comm_rank(MPI_COMM_WORLD, &rank); 
    MPI_Comm_size(MPI_COMM_WORLD, &size); 
 
    if (M % size != 0) { 
        if (rank == 0) 
            printf("Matrix row size M must be divisible by number of processes.\n"); 
        MPI_Finalize(); 
        return -1; 
    } 
 
    int rows_per_process = M / size; 
 
    // Initialize matrices A and B in the root process 
    if (rank == 0) { 
        printf("Matrix A:\n"); 
        for (int i = 0; i < M; i++) { 
            for (int j = 0; j < N; j++) { 
                A[i][j] = i + j; 
                printf("%3d ", A[i][j]); 
            } 
            printf("\n"); 
        } 
 
        printf("Matrix B:\n"); 
        for (int i = 0; i < N; i++) { 
            for (int j = 0; j < P; j++) { 
                B[i][j] = i * j; 
                printf("%3d ", B[i][j]); 
            } 
            printf("\n"); 
        } 
    } 
 
    // Scatter rows of A 
    MPI_Scatter(A, rows_per_process * N, MPI_INT, local_A, rows_per_process * N, MPI_INT, 0, 
MPI_COMM_WORLD); 
 
    // Broadcast matrix B to all processes 
    MPI_Bcast(B, N * P, MPI_INT, 0, MPI_COMM_WORLD); 
 
    // Local computation of matrix multiplication 
    for (int i = 0; i < rows_per_process; i++) { 
        for (int j = 0; j < P; j++) { 
            local_C[i][j] = 0; 
            for (int k = 0; k < N; k++) { 
                local_C[i][j] += local_A[i][k] * B[k][j]; 
            } 
        } 
    } 
 
    // Gather results into matrix C 
    MPI_Gather(local_C, rows_per_process * P, MPI_INT, C, rows_per_process * P, MPI_INT, 0, 
MPI_COMM_WORLD); 
 
    // Display result in root 
    if (rank == 0) { 
        printf("Matrix C (Product):\n"); 
        for (int i = 0; i < M; i++) { 
            for (int j = 0; j < P; j++) { 
                printf("%4d ", C[i][j]); 
            } 
            printf("\n"); 
        } 
    } 
 
    MPI_Finalize(); 
    return 0; 
} 
